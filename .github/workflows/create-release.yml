name: Create Release

on:
    workflow_run:
        workflows: ["Create Zip Artifact"]
        types:
            - completed

jobs:
  release:
    runs-on: ubuntu-20.04
    permissions: write-all
    if: github.event.workflow_run.conclusion == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install GitHub CLI and Login
      run: |
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C99B11DEB97541F0 23F3D4EA75716059
        sudo apt-add-repository https://cli.github.com/packages
        sudo apt update
        sudo apt install -y gh
        gh auth login --with-token <<< "${{ secrets.github_token }}"

    - name: Get latest draft release info
      id: get_draft
      run: |
        set +e  # disable exit on error temporarily
        RELEASE_DATA=$(gh release list --repo ${{ github.repository }} --limit 5 | grep draft)
        STATUS=$?
        set -e  # enable exit on error again

        if [ $STATUS -ne 0 ] || [ -z "$RELEASE_DATA" ]; then
          echo "No draft release found."
          echo "DRAFT_NOT_FOUND=1" >> $GITHUB_ENV
        else
          TAG_NAME=$(echo "$RELEASE_DATA" | awk '{print $1}')
          echo "Latest draft release tag: $TAG_NAME"
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
        fi

    - name: Publish the draft release with Artifact
      if: env.DRAFT_NOT_FOUND != '1'
      run: |
         gh release upload ${{ env.RELEASE_TAG }} ./artifacts/YouTube_Max_Quality_Switcher_v${{ env.RELEASE_TAG }}.zip --repo ${{ github.repository }}
    
    - name: Extract version from manifest.json (Fallback Mode)
      if: env.DRAFT_NOT_FOUND == '1'
      run: |
          sudo apt-get install -y jq
          VERSION=$(jq -r .version manifest.json)
          echo "CURRENT_RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release with Artifact (Fallback Mode)
      if: env.DRAFT_NOT_FOUND == '1'
      run: |
         gh release create v${{ env.CURRENT_RELEASE_VERSION }} ./artifacts/YouTube_Max_Quality_Switcher_v${{ env.CURRENT_RELEASE_VERSION }}.zip --title "Release v${{ env.CURRENT_RELEASE_VERSION }}" --notes "Release notes for v${{ env.CURRENT_RELEASE_VERSION }}"