name: Version Updates

on:
  pull_request:
    types: [ closed ]
    branches:
      - master

concurrency:
  group: version-bump
  cancel-in-progress: true

jobs:
  update-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github_token }}
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Check for [auto-bump] in commit message
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          if [[ $COMMIT_MSG == *"[auto-bump]"* ]]; then
            echo "[auto-bump] detected in commit message. Exiting workflow."
            exit 78
          fi

      - name: Install GitHub CLI and Login
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C99B11DEB97541F0 23F3D4EA75716059
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install -y gh
          gh auth login --with-token <<< "${{ secrets.github_token }}"

      - name: Get version bump label from PR
        id: get-bump-label
        run: |
          LABELS_JSON=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          echo
          echo ========================
          if echo "$LABELS_JSON" | grep -q "version: major"; then
            echo "Version bump: major"
            echo "bump=major" >> $GITHUB_ENV
          elif echo "$LABELS_JSON" | grep -q "version: minor"; then
            echo "Version bump: minor"
            echo "bump=minor" >> $GITHUB_ENV
          elif echo "$LABELS_JSON" | grep -q "version: patch"; then
            echo "Version bump: patch"
            echo "bump=patch" >> $GITHUB_ENV
          else
            echo "Version bump: none"
            echo "bump=none" >> $GITHUB_ENV
          fi

      - name: Update manifest.json
        if: env.bump != 'none'
        run: |
          sudo apt-get install -y jq
          
          CURRENT_VERSION=$(jq -r .version manifest.json)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [[ "${{ env.bump }}" == "major" ]]; then
            NEW_ARTIFACT_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "${{ env.bump }}" == "minor" ]]; then
            NEW_ARTIFACT_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_ARTIFACT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          # Printing the calculated version
          echo "Calculated version: $NEW_ARTIFACT_VERSION"

          # Store the NEW_ARTIFACT_VERSION for next steps
          echo "NEW_ARTIFACT_VERSION=$NEW_ARTIFACT_VERSION" >> $GITHUB_ENV

          jq --arg NEW_ARTIFACT_VERSION "$NEW_ARTIFACT_VERSION" '.version = $NEW_ARTIFACT_VERSION' manifest.json > manifest_updated.json
          mv manifest_updated.json manifest.json

      - name: Commit manifest.json
        if: env.bump != 'none'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://${{ secrets.github_token }}@github.com/lakshaykaura/Auto_Max_Quality_Pro.git
          git add manifest.json
          git commit -m "Artifact version bumped to ${{ env.NEW_ARTIFACT_VERSION }} in manifest.json [auto-bump]"
          git push origin HEAD:${{ github.ref }}