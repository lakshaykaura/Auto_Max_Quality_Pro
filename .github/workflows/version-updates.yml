name: Version Updates

on:
  pull_request:
    types: [closed]
    branches:
      - master

concurrency: 
  group: version-bump
  cancel-in-progress: true

jobs:
  update-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github_token }}
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Check for [auto-bump] in commit message
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          if [[ $COMMIT_MSG == *"[auto-bump]"* ]]; then
            echo "[auto-bump] detected in commit message. Exiting workflow."
            exit 78
          fi

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C99B11DEB97541F0 23F3D4EA75716059
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install -y gh
          gh auth login --with-token <<< "${{ secrets.github_token }}"
          
      - name: Determine version bump
        id: determine-version
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          
          BUMP="none"
          TMP_BUMP_FILE=bump.txt
          if [[ $COMMIT_MSG == "Merge pull request #"* ]]; then
            PR_NUMBER=$(echo $COMMIT_MSG | grep -o '#[0-9]\+' | grep -o '[0-9]\+')
      
            echo "Commit Message: $COMMIT_MSG"
            echo .
            echo "PR Number: $PR_NUMBER"
            
            COMMIT_MSGS=$(gh pr view $PR_NUMBER --json commits -q ".commits[].commit.message")

            echo "All Commit Messages: $COMMIT_MSGS"

            echo "$COMMIT_MSGS" | while IFS=$'\n' read -r msg; do
              echo "IFS  1: Processing commit message: '$msg'"
            done

            echo "$COMMIT_MSGS" | while IFS= read -r msg; do
              echo "IFS  2: Processing commit message: '$msg'"
            done

            COMMIT_MSGS=$(gh pr view $PR_NUMBER --json commits | jq -r '.commits[].commit.message')

            echo "All Commit Messages: $COMMIT_MSGS"

            echo "$COMMIT_MSGS" | while IFS=$'\n' read -r msg; do
              echo "IFS  1: Processing commit message: '$msg'"
            done

            echo "$COMMIT_MSGS" | while IFS= read -r msg; do
              echo "IFS  2: Processing commit message: '$msg'"
            done
            
            echo "$COMMIT_MSGS" | while IFS=$'\n' read -r msg; do
              
              # Debug echo
              echo "Processing commit message: '$msg'"
              
              # Remove all whitespaces
              msg=$(echo "$msg" | tr -d '[:space:]')
              
              # Skip empty commit messages
              if [ -z "$msg" ]; then
                continue
              fi
              
              # Check if the message starts with "Revert" and extract the original commit message.
              if [[ $msg == Revert* ]]; then
                  msg="${msg#Revert \"}" # Remove "Revert " prefix
                  msg="${msg%\"}"        # Remove trailing double quote
              fi
              
              echo "Checking for major release..."
              if [[ $msg == *"Release: "* ]]; then
                  echo "major" > $TMP_BUMP_FILE
                  break
              else
                  echo "Checking for minor release..."
                  if [[ $msg == "Major Update: "* || $msg == "New Feature: "* || $msg == "Improvement: "* || $msg == "Performance: "* || $msg == "Bug Fix: "* || $msg == "Security Fix: "* || $msg == "Hotfix: "* ]]; then
                      echo "minor" > $TMP_BUMP_FILE
                  elif [[ ! -f $TMP_BUMP_FILE ]]; then
                    echo "Checking for patch..."
                    if [[ $msg == "Minor Update: "* ]] || [[ $msg == "Documentation Update: "* ]] || [[ $msg == "Build: "* ]] || [[ $msg == "CI: "* ]] || [[ $msg == "Style: "* ]]; then
                        echo "patch" > $TMP_BUMP_FILE
                    fi
                  fi
              fi
              echo "TMP_BUMP_FILE status: $( [[ -f $TMP_BUMP_FILE ]] && echo 'Created' || echo 'Still not created' )"
            done
            
            if [[ -f $TMP_BUMP_FILE ]]; then
              BUMP=$(cat $TMP_BUMP_FILE)
              rm $TMP_BUMP_FILE
            fi
          fi
          
          echo "Bump: $BUMP"
          echo "bump=$BUMP" >> $GITHUB_ENV

      - name: Update manifest.json
        if: env.bump != 'none'
        run: |
          sudo apt-get install -y jq
          
          CURRENT_VERSION=$(jq -r .version manifest.json)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [[ "${{ env.bump }}" == "major" ]]; then
            NEW_ARTIFACT_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "${{ env.bump }}" == "minor" ]]; then
            NEW_ARTIFACT_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_ARTIFACT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          # Printing the calculated version
          echo "Calculated version: $NEW_ARTIFACT_VERSION"

          # Store the NEW_ARTIFACT_VERSION for next steps
          echo "NEW_ARTIFACT_VERSION=$NEW_ARTIFACT_VERSION" >> $GITHUB_ENV

          jq --arg NEW_ARTIFACT_VERSION "$NEW_ARTIFACT_VERSION" '.version = $NEW_ARTIFACT_VERSION' manifest.json > manifest_updated.json
          mv manifest_updated.json manifest.json

      - name: Commit manifest.json
        if: env.bump != 'none'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://${{ secrets.github_token }}@github.com/lakshaykaura/YouTube_Max_Quality_Switcher.git
          git add manifest.json
          git commit -m "Artifact version bumped to ${{ env.NEW_ARTIFACT_VERSION }} in manifest.json [auto-bump]"
          git push origin HEAD:${{ github.ref }}