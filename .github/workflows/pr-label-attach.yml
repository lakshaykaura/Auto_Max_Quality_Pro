name: Attach PR Version Label

on:
  pull_request:
    types: [opened, synchronize]

concurrency: 
  group: version-bump
  cancel-in-progress: true

jobs:
  attach-label:
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github_token }}
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Check for [auto-bump] in commit message
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          if [[ $COMMIT_MSG == *"[auto-bump]"* ]]; then
            echo "[auto-bump] detected in commit message. Exiting workflow."
            exit 78
          fi

      - name: Install GitHub CLI and Login
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C99B11DEB97541F0 23F3D4EA75716059
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install -y gh
          gh auth login --with-token <<< "${{ secrets.github_token }}"

      - name: Determine version bump
        id: determine-version
        run: |
          BUMP="none"
          TMP_BUMP_FILE=bump.txt
          COMMIT_MSGS=$(git log origin/master...HEAD --pretty=format:"%s")
          echo ========================
          echo "$COMMIT_MSGS" | while IFS= read -r msg; do
            echo
              
            # Remove all whitespaces
            msg=$(echo "$msg" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            echo "Processing commit: '$msg'"
            
            # Skip empty commit messages
            if [ -z "$msg" ]; then
              continue
            fi
            
            # Check if the message starts with "Revert" and extract the original commit message.
            if [[ $msg == Revert* ]]; then
                msg="${msg#Revert \"}" # Remove "Revert " prefix
                msg="${msg%\"}"        # Remove trailing double quote
            fi
            
            if [[ $msg == *"Release: "* ]]; then
                echo "major" > $TMP_BUMP_FILE
                break
            elif [[ $msg == "Major Update: "* || $msg == "New Feature: "* || $msg == "Improvement: "* || $msg == "Performance: "* || $msg == "Bug Fix: "* || $msg == "Security Fix: "* || $msg == "Hotfix: "* ]]; then
                echo "minor" > $TMP_BUMP_FILE
            elif [[ ! -f $TMP_BUMP_FILE ]]; then
              if [[ $msg == "Minor Update: "* || $msg == "Documentation Update: "* || $msg == "Build: "* || $msg == "CI: "* || $msg == "Style: "* ]]; then
                  echo "patch" > $TMP_BUMP_FILE
              fi
            fi
            
            if [[ -f $TMP_BUMP_FILE ]]; then
                echo "Calculated version bump for this commit: $(cat $TMP_BUMP_FILE)"
            else
                echo "Calculated version bump for this commit: null"
            fi
          done
          if [[ -f $TMP_BUMP_FILE ]]; then
            BUMP=$(cat $TMP_BUMP_FILE)
            rm $TMP_BUMP_FILE
          fi
          echo
          echo ========================
          echo "Final calculated version bump: $BUMP"
          echo "bump=$BUMP" >> $GITHUB_ENV

      - name: Remove existing version labels and add new one
        run: |
          if [[ "${{ env.bump }}" == "major" ]]; then
              LABEL="version: major"
          elif [[ "${{ env.bump }}" == "minor" ]]; then
              LABEL="version: minor"
          else
              LABEL="version: patch"
          fi

          # Remove existing version labels
          gh api repos/:owner/:repo/issues/${{ github.event.pull_request.number }}/labels -X DELETE -f name="version: major" -f name="version: minor" -f name="version: patch"
          
          # Add the calculated label
          gh api repos/:owner/:repo/issues/${{ github.event.pull_request.number }}/labels -X POST -F labels[]="$LABEL"